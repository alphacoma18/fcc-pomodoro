/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/18KnkeXtRNC
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { Button } from "@/components/ui/button";
import { useEffect, useState } from "react";

export function Pomodoro() {
  const [breakLength, setBreakLength] = useState(5);
  const [sessionLength, setSessionLength] = useState(25);
  const [timeLeft, setTimeLeft] = useState(sessionLength * 60);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [isBreak, setIsBreak] = useState(false);
  const [audioPlayer, setAudioPlayer] = useState<HTMLAudioElement | null>(null);

  const audioRef = (audioPlayer: HTMLAudioElement) => {
    setAudioPlayer(audioPlayer);
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const handleBreakIncrement = () => {
    setBreakLength((prevLength) => Math.min(prevLength + 1, 60));
  };

  const handleBreakDecrement = () => {
    setBreakLength((prevLength) => Math.max(prevLength - 1, 1));
  };

  const handleSessionIncrement = () => {
    setSessionLength((prevLength) => Math.min(prevLength + 1, 60));
    setTimeLeft((prevTime) => prevTime + 60);
  };

  const handleSessionDecrement = () => {
    setSessionLength((prevLength) => Math.max(prevLength - 1, 1));
    setTimeLeft((prevTime) => prevTime - 60);
  };

  const handleStart = () => {
    setIsTimerRunning(true);
  };

  const handleStop = () => {
    setIsTimerRunning(false);
  };

  const handleReset = () => {
    setBreakLength(5);
    setSessionLength(25);
    setTimeLeft(25 * 60);
    setIsTimerRunning(false);
    setIsBreak(false);
    if (audioPlayer) {
      audioPlayer.pause();
      audioPlayer.currentTime = 0;
    }
  };

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    if (isTimerRunning) {
      interval = setInterval(() => {
        setTimeLeft((prevTime) => prevTime - 1);
      }, 1000);
    }
    return () => {
      if (interval !== null) {
        clearInterval(interval);
      }
    };
  }, [isTimerRunning]);

  useEffect(() => {
    if (timeLeft !== 0) return;
    if (!audioPlayer) return;
    audioPlayer.play();
    setIsBreak((prevState) => !prevState);
    setTimeLeft(isBreak ? sessionLength * 60 : breakLength * 60);
  }, [timeLeft, isBreak, sessionLength, breakLength, audioPlayer]);

  return (
    <div className="flex flex-col items-center justify-center h-screen bg-background text-foreground">
      <div className="max-w-md w-full px-4 py-8 space-y-6">
        <div className="flex items-center justify-between">
          <div className="flex flex-col items-center">
            <h2 className="text-lg font-medium" id="break-label">Break Length</h2>
            <div className="flex items-center gap-4">
              <Button
                id="break-decrement"
                onClick={handleBreakDecrement}
                disabled={breakLength === 1}
                variant="ghost"
                size="icon"
              >
                <MinusIcon className="w-5 h-5" />
              </Button>
              <span id="break-length" className="text-2xl font-bold">{breakLength}</span>
              <Button
                id="break-increment"
                onClick={handleBreakIncrement}
                disabled={breakLength === 60}
                variant="ghost"
                size="icon"
              >
                <PlusIcon className="w-5 h-5" />
              </Button>
            </div>
          </div>
          <div className="flex flex-col items-center">
            <h2 className="text-lg font-medium" id="session-label">Session Length</h2>
            <div className="flex items-center gap-4">
              <Button
                id="session-decrement"
                onClick={handleSessionDecrement}
                disabled={sessionLength === 1}
                variant="ghost"
                size="icon"
              >
                <MinusIcon className="w-5 h-5" />
              </Button>
              <span id="session-length" className="text-2xl font-bold">{sessionLength}</span>
              <Button
                id="session-increment"
                onClick={handleSessionIncrement}
                disabled={sessionLength === 60}
                variant="ghost"
                size="icon"
              >
                <PlusIcon className="w-5 h-5" />
              </Button>
            </div>
          </div>
        </div>
        <div className="flex flex-col items-center space-y-4">
          <div className="text-6xl font-bold" id="time-left">{formatTime(timeLeft)}</div>
          <div className="flex gap-4">
            <Button id="start_stop" onClick={isTimerRunning ? handleStop : handleStart}>
              {isTimerRunning ? 'Stop' : 'Start'}
            </Button>
            <Button id="reset" onClick={handleReset}>Reset</Button>
          </div>
        </div>
        <audio id="beep" ref={audioRef} src="/alarm.wav" />
      </div>
    </div>
  );
}


function MinusIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
    </svg>
  );
}


function PlusIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}
